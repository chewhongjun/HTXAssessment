# In your elastic-backend/docker-compose.yml
version: '3.8'

services:
  es01:
    image: elasticsearch:8.13.4
    container_name: es01
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02
      - cluster.initial_master_nodes=es01,es02
      - ELASTIC_PASSWORD=changeme # Make sure this matches your cv-index.py
      - xpack.security.enabled=false # Keep security disabled for easier setup
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata01:/usr/share/elasticsearch/data
    networks:
      - elastic_net

  es02:
    image: elasticsearch:8.13.4
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01
      - cluster.initial_master_nodes=es01,es02
      - ELASTIC_PASSWORD=changeme # Make sure this matches your cv-index.py
      - xpack.security.enabled=false # Keep security disabled for easier setup
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata02:/usr/share/elasticsearch/data
    networks:
      - elastic_net

  kibana: # <--- Your Kibana service
    image: docker.elastic.co/kibana/kibana:8.13.4 # Pull from Elastic's official registry
    container_name: kibana-app
    ports:
      - "5601:5601" # Access Kibana on host port 5601
    environment:
      - ELASTICSEARCH_HOSTS=http://es01:9200 # Connect to Elasticsearch service name
      - xpack.security.enabled=false # Must match ES security setting
    networks:
      - elastic_net
    depends_on:
      - es01 # Ensure ES is up before Kibana starts

volumes:
  esdata01:
    driver: local
  esdata02:
    driver: local

networks:
  elastic_net:
    driver: bridge